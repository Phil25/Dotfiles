# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import platform
import os
import ycm_core
from distutils.sysconfig import get_python_inc

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']
HEADER_EXTENSIONS = ['.h', '.hxx', '.hpp', '.hh']

# These are the compilation flags that will be used in case there's no
# compilation database set (by default, one is not set).
flags = [
    '-x', 'c++',
    '-Wall',
    '-Wextra',
    '-Werror',
    '-Wno-long-long',
    '-Wno-variadic-macros',
    '-fexceptions',
    '-DNDEBUG',
    '-isystem', '../BoostParts',
    '-isystem', get_python_inc(),
    '-isystem', '../llvm/include',
    '-isystem', '../llvm/tools/clang/include',
    '-I', '.',
    '-I', './ClangCompleter',
]

def DirectoryOfThisScript():
    return os.path.dirname(os.path.abspath(__file__))

def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in HEADER_EXTENSIONS

# Search through all subdirectories to find the most up to date
# compile_commands.json. This assumes that vim is opened in the
# root directory of the project.
def FindDatabaseDir():
    root = os.getcwd()
    database_dir = ''
    last_modified = 0

    for d in os.listdir(root):
        if not os.path.isdir(d):
            continue

        commands_file = os.path.join(d, 'compile_commands.json')

        if not os.path.isfile(commands_file):
            continue

        commands_mod_time = os.path.getmtime(commands_file)

        if commands_mod_time > last_modified:
            database_dir = d
            last_modified = commands_mod_time

    return database_dir

# Set this to the absolute path to the directory (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.

compilation_database_dir = FindDatabaseDir()

# Clang automatically sets the '-std=' flag to 'c++14' for
# MSVC 2015 or later, which is required for compiling the
# standard library, and to 'c++11' for older versions.
if platform.system() != 'Windows':
    flags.append('-std=c++17')

if compilation_database_dir:
    database = ycm_core.CompilationDatabase(compilation_database_dir)
else:
    database = None

def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension

            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(replacement_file)

                if compilation_info.compiler_flags_:
                    return compilation_info

        return None

    return database.GetCompilationInfoForFile(filename)

def FlagsForFile(filename, **kwargs):
    if not database:
        return {
            'flags': flags,
            'include_paths_relative_to_dir': DirectoryOfThisScript()
        }

    compilation_info = GetCompilationInfoForFile(filename)
    if not compilation_info:
        return None

    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object.
    final_flags = list(compilation_info.compiler_flags_)

    return {
        'flags': final_flags,
        'include_paths_relative_to_dir': compilation_info.compiler_working_dir_
    }
